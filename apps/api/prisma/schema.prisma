// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  bio          String?
  role         UserRole @default(User)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  comments Comment[]
  likes    Like[]

  @@map("users")
}

model Poem {
  id        String   @id @default(uuid())
  title     String
  content   String
  author    String
  tags      String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  comments Comment[]
  likes    Like[]

  @@map("poems")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  poem   Poem   @relation(fields: [poemId], references: [id], onDelete: Cascade)
  poemId String @map("poem_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  poem   Poem   @relation(fields: [poemId], references: [id], onDelete: Cascade)
  poemId String @map("poem_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([poemId, userId])
  @@map("likes")
}

enum UserRole {
  Admin
  User
}
